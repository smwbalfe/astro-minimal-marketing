---
import { type CollectionEntry, getCollection } from 'astro:content';
import { Image } from 'astro:assets';
import Footer from '../../../components/Footer.astro';
import Header from '../../../components/Header.astro';
import Layout from '../../../layouts/Layout.astro';
import FormattedDate from '../../../components/FormattedDate.astro';

export async function getStaticPaths() {
	const posts = await getCollection('blog');
	const categories = [...new Set(posts.flatMap(post => post.data.categories))];

	return categories.map(category => ({
		params: { category },
		props: {
			category,
			posts: posts.filter(post => post.data.categories.includes(category))
		}
	}));
}

interface Props {
	category: string;
	posts: CollectionEntry<'blog'>[];
}

const { category, posts } = Astro.props;
---

<Layout metadata={{ title: `Posts in "${category}"`, description: `All blog posts in the ${category} category` }}>
	<main class="flex-1">
		<section class="section-padding bg-base-200">
			<div class="container">
				<div class="max-w-3xl mx-auto text-center">
					<h1 class="text-4xl md:text-5xl font-bold text-base-content mb-6">
						<span class="text-primary">{category}</span> Category
					</h1>
					<p class="text-xl text-base-content/70">
						{posts.length} post{posts.length !== 1 ? 's' : ''} in this category
					</p>
				</div>
			</div>
		</section>

		<section class="section-padding">
			<div class="container">
				<div class="max-w-6xl mx-auto">
					<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
						{posts.map((post) => (
							<article class="group bg-base-100 rounded-xl shadow-sm hover:shadow-md transition-shadow duration-300 overflow-hidden">
								<a href={`/blog/${post.id}/`} class="block">
									{post.data.heroImage && (
										<div class="aspect-video overflow-hidden">
											<Image
												width={400}
												height={225}
												src={post.data.heroImage}
												alt={post.data.title}
												class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
											/>
										</div>
									)}
								</a>
								<div class="p-6">
									<div class="mb-3">
										<time class="text-sm text-base-content/60">
											<FormattedDate date={post.data.pubDate} />
										</time>
									</div>
									<h2 class="text-xl font-bold text-base-content mb-3 group-hover:text-primary transition-colors line-clamp-2">
										<a href={`/blog/${post.id}/`} class="no-underline">
											{post.data.title}
										</a>
									</h2>
									{post.data.description && (
										<p class="text-base-content/70 mb-4 line-clamp-3 text-sm">
											{post.data.description}
										</p>
									)}
									<a
										href={`/blog/${post.id}/`}
										class="inline-flex items-center text-primary hover:text-primary/80 font-medium text-sm no-underline"
									>
										Read more
										<svg class="ml-1 w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
										</svg>
									</a>
								</div>
							</article>
						))}
					</div>
				</div>
			</div>
		</section>
	</main>
</Layout>

